/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXPath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,11],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,10],$Vg=[1,26],$Vh=[1,27],$Vi=[5,6],$Vj=[1,32],$Vk=[1,35],$Vl=[5,6,18,19,20,21,22,23,24,25,26,27,28,29,30],$Vm=[5,6,8,15,32,53,54],$Vn=[5,6,8,15,18,19,20,21,22,23,24,25,26,27,28,29,30,32,37,38,39,40,41,42,43,44,45,46,47,48,53,54],$Vo=[2,55],$Vp=[1,48],$Vq=[2,31],$Vr=[1,51],$Vs=[1,53],$Vt=[1,54],$Vu=[1,68],$Vv=[1,60],$Vw=[1,59],$Vx=[1,57],$Vy=[1,58],$Vz=[1,61],$VA=[1,62],$VB=[1,63],$VC=[1,64],$VD=[1,65],$VE=[1,66],$VF=[1,67],$VG=[1,69],$VH=[1,70],$VI=[6,8,15,37,38,39,40,41,42,43,44,45,46,47,48],$VJ=[6,37,38,39,40,41,42,43,44,45,46,47],$VK=[6,37,40,41,42,43,44,45,46,47],$VL=[6,37,40,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"XPATH":4,"EOF":5,"barra":6,"TIPO_PATH":7,"slash":8,"STEP":9,"lIST_PATH":10,"AXIS":11,"AXIS_NAME":12,"doubleColon":13,"AXIS_OPTION":14,"asterisk":15,"PATH":16,"id":17,"ancestor":18,"ancestor_or_self":19,"attribute":20,"child":21,"descendant":22,"descendant_or_self":23,"following":24,"following_sibling":25,"namespace":26,"parent":27,"preceding":28,"preceding_sibling":29,"self":30,"OPTIONS":31,"doubleSlash":32,"WILDCARD":33,"PREDICATE":34,"corcheteIzq":35,"E":36,"corcheteDer":37,"add":38,"minus":39,"equal":40,"diferent":41,"menor":42,"menorIgual":43,"mayor":44,"mayorIgual":45,"or":46,"and":47,"mod":48,"parIzq":49,"parDer":50,"digits":51,"decimal":52,"at":53,"node":54,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"barra",8:"slash",13:"doubleColon",15:"asterisk",17:"id",18:"ancestor",19:"ancestor_or_self",20:"attribute",21:"child",22:"descendant",23:"descendant_or_self",24:"following",25:"following_sibling",26:"namespace",27:"parent",28:"preceding",29:"preceding_sibling",30:"self",32:"doubleSlash",35:"corcheteIzq",37:"corcheteDer",38:"add",39:"minus",40:"equal",41:"diferent",42:"menor",43:"menorIgual",44:"mayor",45:"mayorIgual",46:"or",47:"and",48:"mod",49:"parIzq",50:"parDer",51:"digits",52:"decimal",53:"at",54:"node"},
productions_: [0,[3,2],[4,3],[4,1],[7,2],[7,1],[7,1],[9,2],[9,1],[11,3],[11,5],[14,1],[14,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[10,2],[10,1],[16,2],[16,2],[16,2],[16,2],[16,1],[31,2],[31,1],[34,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[36,1],[36,1],[36,1],[33,1],[33,2],[33,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,7:3,8:$V0,9:5,10:6,11:7,12:9,15:$V1,16:8,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,32:$Vf,33:12,53:$Vg,54:$Vh},{1:[3]},{5:[1,28],6:[1,29]},o($Vi,[2,3]),{9:30,11:7,12:9,17:$Vj,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:31},o($Vi,[2,5],{12:9,11:33,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve}),o($Vi,[2,6],{33:12,16:34,8:$Vk,15:$V1,32:$Vf,53:$Vg,54:$Vh}),o($Vl,[2,8]),o($Vm,[2,27]),{13:[1,36]},{15:[1,38],17:$Vj,31:37},o($Vn,$Vo),o($Vn,[2,32]),{13:[2,13]},{13:[2,14]},{13:[2,15]},{13:[2,16]},{13:[2,17]},{13:[2,18]},{13:[2,19]},{13:[2,20]},{13:[2,21]},{13:[2,22]},{13:[2,23]},{13:[2,24]},{13:[2,25]},{15:[1,40]},{35:[1,41]},{1:[2,1]},{7:42,8:$V0,9:5,10:6,11:7,12:9,15:$V1,16:8,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,32:$Vf,33:12,53:$Vg,54:$Vh},o($Vi,[2,4],{12:9,11:33,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve}),o($Vn,[2,28]),o($Vn,[2,34],{34:43,35:[1,44]}),o($Vl,[2,7]),o($Vm,[2,26]),{17:$Vj,31:31},{8:$Vk,14:45,15:[1,46],16:47,17:$Vp,32:$Vf,33:12,53:$Vg,54:$Vh},o($Vn,[2,29]),o($Vn,[2,30]),o($Vn,$Vq),o($Vn,[2,56]),{37:[1,49]},o($Vi,[2,2]),o($Vn,[2,33]),{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:50,51:$Vs,52:$Vt,53:$Vg,54:$Vh},o($Vl,[2,9]),o($Vl,$Vo,{8:[1,55]}),o($Vl,[2,11]),o($Vl,[2,12]),o($Vn,[2,57]),{6:$Vu,8:$Vv,15:$Vw,37:[1,56],38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH},o($VI,[2,51],{49:[1,71]}),o($VI,[2,52]),o($VI,[2,53]),o($VI,[2,54]),o($Vl,$Vq,{33:12,16:47,14:72,8:$Vk,15:$V1,17:$Vp,32:$Vf,53:$Vg,54:$Vh}),o($Vn,[2,35]),{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:73,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:74,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:75,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:76,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:77,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:78,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:79,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:80,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:81,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:82,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:83,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:84,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:85,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{8:$Vk,15:$V1,16:52,17:$Vr,32:$Vf,33:12,36:86,51:$Vs,52:$Vt,53:$Vg,54:$Vh},{50:[1,87]},o($Vl,[2,10]),o($VJ,[2,36],{8:$Vv,15:$Vw,48:$VH}),o($VJ,[2,37],{8:$Vv,15:$Vw,48:$VH}),o($VI,[2,38]),o($VI,[2,39]),{6:$Vu,8:$Vv,15:$Vw,37:[2,40],38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH},o($VK,[2,41],{8:$Vv,15:$Vw,38:$Vx,39:$Vy,48:$VH}),o($VK,[2,42],{8:$Vv,15:$Vw,38:$Vx,39:$Vy,48:$VH}),o($VK,[2,43],{8:$Vv,15:$Vw,38:$Vx,39:$Vy,48:$VH}),o($VK,[2,44],{8:$Vv,15:$Vw,38:$Vx,39:$Vy,48:$VH}),o($VK,[2,45],{8:$Vv,15:$Vw,38:$Vx,39:$Vy,48:$VH}),o($VL,[2,46],{8:$Vv,15:$Vw,38:$Vx,39:$Vy,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,47:$VG,48:$VH}),o($VL,[2,47],{8:$Vv,15:$Vw,38:$Vx,39:$Vy,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,47:$VG,48:$VH}),o([6,37,40,46,47],[2,48],{8:$Vv,15:$Vw,38:$Vx,39:$Vy,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,48:$VH}),o($VI,[2,49]),o($VI,[2,50])],
defaultActions: {13:[2,13],14:[2,14],15:[2,15],16:[2,16],17:[2,17],18:[2,18],19:[2,19],20:[2,20],21:[2,21],22:[2,22],23:[2,23],24:[2,24],25:[2,25],28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 15;
break;
case 1:return 49;
break;
case 2:return 50;
break;
case 3:return 'llaIzq';
break;
case 4:return 'llaDer';
break;
case 5:return 13;
break;
case 6:return 'colon';
break;
case 7:return 6;
break;
case 8:return 35;
break;
case 9:return 37;
break;
case 10:return 38;
break;
case 11:return 'comma';
break;
case 12:return 39;
break;
case 13:return 'arrow';
break;
case 14:return 40;
break;
case 15:return 32;
break;
case 16:return 8;
break;
case 17:return 41;
break;
case 18:return 42;
break;
case 19:return 43;
break;
case 20:return 44;
break;
case 21:return 45;
break;
case 22:return 53;
break;
case 23:return 46;
break;
case 24:return 'let';
break;
case 25:return 47;
break;
case 26:return 'div';
break;
case 27:return 48;
break;
case 28:return 54;
break;
case 29:return 21;
break;
case 30:return 30;
break;
case 31:return 27;
break;
case 32:return 'comment';
break;
case 33:return 'element';
break;
case 34:return 18;
break;
case 35:return 26;
break;
case 36:return 20;
break;
case 37:return 28;
break;
case 38:return 24;
break;
case 39:return 19;
break;
case 40:return 23;
break;
case 41:return 25;
break;
case 42:return 29;
break;
case 43:return 'processing_instruction';
break;
case 44:return  'digits';
break;
case 45:return  'decimal';
break;
case 46:return 'STRING_LITERAL';
break;
case 47:return 17;
break;
case 48:return 5;
break;
case 49:
        console.error('Error');

break;
}
},
rules: [/^(?:\*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:::)/i,/^(?::)/i,/^(?:\|)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:,)/i,/^(?:-)/i,/^(?:=>)/i,/^(?:=)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:@)/i,/^(?:or\b)/i,/^(?:let\b)/i,/^(?:and\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:node\b)/i,/^(?:child\b)/i,/^(?:self\b)/i,/^(?:parent\b)/i,/^(?:comment\b)/i,/^(?:element\b)/i,/^(?:ancestor\b)/i,/^(?:namespace\b)/i,/^(?:attribute\b)/i,/^(?:preceding\b)/i,/^(?:following\b)/i,/^(?:ancestor_or_self\b)/i,/^(?:descendant_or_self\b)/i,/^(?:following_sibling\b)/i,/^(?:preceding_sibling\b)/i,/^(?:processing_instruction\b)/i,/^(?:[0-9]+)/i,/^(?:(\.{digits})|({digits}\.[0-9]*))/i,/^(?:("({EscapeQuot}|[^"])*")|('\(\{EscapeApos\}\|\[\^'\]\)\*'))/i,/^(?:[A-Za-z_][A-Za-z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaXPath;
exports.Parser = gramaticaXPath.Parser;
exports.parse = function () { return gramaticaXPath.parse.apply(gramaticaXPath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}